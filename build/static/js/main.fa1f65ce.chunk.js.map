{"version":3,"sources":["context/RootContext.js","assets/search.png","components/Searchbar.js","components/Header.js","components/PhotoCard.js","components/Loader.js","components/Scroller.js","containers/Home.js","containers/Search.js","App.js","reportWebVitals.js","index.js"],"names":["RootContext","createContext","Searchbar","useContext","getSearchValue","searchValue","onEnterKeyPressed","onSearchBtnPress","item","searchHistory","JSON","parse","localStorage","getItem","length","find","element","name","arr","map","i","push","setItem","stringify","className","items","onSearch","string","results","onSelect","onClear","window","location","reload","autoFocus","styling","borderRadius","Button","variant","style","marginLeft","onClick","src","searchIcon","alt","width","Header","Navbar","bg","expand","display","justifyContent","position","left","top","zIndex","Brand","color","fontSize","fontStyle","Photos","props","useState","showModal","setShowModal","photoUrl","photo","server","id","secret","Card","Img","Modal","show","onHide","centered","closeButton","Title","title","Body","override","css","Loader","loading","padding","size","Scroller","prop","photos","hasMore","remainingItems","Container","dataLength","next","setTimeout","getRecentImages","endMessage","Row","Col","xs","sm","md","PhotoCard","axios","require","currentPage","getPhotos","getCurrentPage","checkHasMore","getLoadingStatus","useEffect","a","apiUrl","get","response","data","page","console","error","Search","isEnterKeyPressed","totalSearchResult","setTotalSearchResult","total","textAlign","margin","App","setPhotos","setCurrentPage","setHasMore","setRemainingItems","setLoading","setSearchValue","setEnterKeyPressed","getHasMore","getRemainingItems","Provider","value","status","search","remaining","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa1f65ce.chunk.js","sourcesContent":["// Using context hooks for state management\n\nimport { createContext } from \"react\";\n\n// creating a context\nexport const RootContext = createContext()","export default __webpack_public_path__ + \"static/media/search.e678b073.png\";","// Searchbar component helps users to input the search query\n\n// importing the React and useContext hook from react\nimport React,{ useContext } from 'react'\n\n\n// importing InputGroup and FormControl from react-bootstrap\nimport { Button } from 'react-bootstrap';\n\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete'\n\n\n// importing the RootContext file from context folder\nimport { RootContext } from '../context/RootContext';\n\n// importing css style \nimport '../App.css'\n\n// importing image icon\nimport searchIcon from '../assets/search.png'\n\nconst Searchbar = () => {\n\n    // Accessing the state values in context using useContext hooks\n    const { getSearchValue, searchValue, onEnterKeyPressed} = useContext(RootContext)\n    // Handling the search key press for searching\n    const onSearchBtnPress = (item) => {\n\n      // getting data from localstorage\n      let searchHistory = JSON.parse(localStorage.getItem('searchHistory'))\n\n      // if localstorage already have data then compare the new search query with \n      // the new search query and if it is not in the list add it to the list\n      if( searchHistory && searchHistory.length > 0) {\n        let found = searchHistory.find(element => element.name === item.name);\n        if(!found) {\n          let arr = []\n          searchHistory.map((i) => {\n            arr.push(i)\n          })\n          arr.push(item)\n          localStorage.setItem('searchHistory', JSON.stringify(arr))\n        }\n      }\n\n      // if the localstorage is empty create a new list for storing search queries\n      else {\n        let arr = []\n        arr.push(item)\n        localStorage.setItem('searchHistory', JSON.stringify(arr))\n      }\n\n      // trigger search api call\n      onEnterKeyPressed(true)\n\n    }\n\n    const handleOnSearch = (string, results) => {\n\n      // onSearch will have as the first callback parameter\n      // the string searched and for the second the results.\n\n      // prevent default calling of search api\n      onEnterKeyPressed(false)\n\n      // updating state value named searchValue using a callback function\n      getSearchValue(string)\n    }\n\n    const handleOnSelect = (item) => {\n\n      // updating state value named searchValue using a callback function\n      getSearchValue(item.name)\n\n      //triggering search button press\n      onSearchBtnPress(item)\n\n    }\n    return(\n\n        <div className=\"search-component\">\n          <div className=\"search-input-custom-width\">\n            <ReactSearchAutocomplete\n\n              // fetch search queries from localstorage otherwise returns an empty array\n              items={\n                (\n                  JSON.parse(localStorage.getItem('searchHistory')) \n                  && JSON.parse(localStorage.getItem('searchHistory')).length>0) ? \n                  JSON.parse(localStorage.getItem('searchHistory')) : []\n              }\n\n              onSearch={handleOnSearch}\n              onSelect={handleOnSelect}\n              onClear = {()=>window.location.reload()}\n              autoFocus\n              styling = {\n                {\n                  borderRadius: \"5px\",\n                }\n              }\n            />\n          </div>\n\n          {/* Search button */}\n          <Button variant=\"light\" style={{marginLeft: 5}} onClick={()=>onSearchBtnPress({name: searchValue})}>\n            <img src={searchIcon} alt=\"\" width=\"20px\" />\n          </Button>\n\n        </div>\n        \n    )\n}\n\nexport default Searchbar","// Header component is the header part of the react application containing the header and the search bar\n\nimport React from 'react'\n\n// importing Navbar component from react-bootstrap\nimport { Navbar } from 'react-bootstrap';\n\n// importing Searchbar component from components folder\nimport Searchbar from './Searchbar';\n\n\nconst Header = () => {\n    \n    return(\n        // using react-bootstrap navbar component\n        <Navbar \n            bg=\"dark\" \n            expand=\"lg\" \n            // overriding bootstrap navbar styles with inline css\n            style={{\n                display: 'flex',\n                justifyContent: 'center', \n                position: 'sticky', \n                left: 0, \n                top: 0, \n                zIndex: 1000\n            }}>\n\n            <div>\n\n                {/* Navbar title */}\n                <Navbar.Brand \n                    // overriding bootstrap navbar styles with inline css\n                    style={{\n                        color: '#fff', \n                        fontSize: '25px', \n                        fontStyle: 'bold'\n                    }}>\n                        Search Photos\n                    </Navbar.Brand>\n\n                {/* Using searchbar component inside header component */}\n                <Searchbar />  \n                \n            </div>\n        </Navbar>\n    )\n}\n\nexport default Header","// PhotoCard is a component to show photos in card and will pop up on clicking the card\n\n// importing React and useState hooks from react\nimport React, { useState } from 'react';\n\n// importing Card and Modal components from react-bootstrap\nimport { Card, Modal } from 'react-bootstrap';\n\nconst Photos = (props) => {\n\n    // initializing state for the modal to pop up\n    const [showModal, setShowModal] = useState(false)\n\n    // URL to fetch the photo from flickr\n    let photoUrl = `https://live.staticflickr.com/${props.photo.server}/${props.photo.id}_${props.photo.secret}.jpg`\n\n    return(\n        <>\n\n            {/* Displaying images in bootstrap card */}\n\n            <Card className=\"photo-card\" onClick={()=>setShowModal(true)}>\n                <Card.Img variant=\"top\" src={photoUrl} />\n            </Card>\n\n\n            {/* modal for showing photo */}\n\n            <Modal show={showModal} onHide={()=>setShowModal(false)} centered>\n                <Modal.Header closeButton>\n                    <Card.Title>{props.photo.title}</Card.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Card>\n                        <Card.Img variant=\"top\" src={photoUrl} />\n                    </Card>\n                </Modal.Body>\n            </Modal>\n\n        </>\n    )\n}\n\nexport default Photos","// Loader is a component to show a custom loader during api calls\n\n// importing useContext hooks \nimport React, { useContext } from 'react'\n\n// custom css for loader\nimport { css } from \"@emotion/react\";\n\n// importing SyncLoader from npm js for showing a loader during api calls\nimport SyncLoader from \"react-spinners/SyncLoader\";\n\n// importing the context\nimport { RootContext } from '../context/RootContext';\n\n// custom style definition for loader\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nconst Loader = () => {\n\n    // Accessing the state values in context using useContext hooks\n    const {loading} = useContext(RootContext)\n\n    return(\n\n        <div style={{padding: 40}}>\n            <SyncLoader color='#212529' loading={loading} css={override} size={10} />\n        </div>\n        \n    )\n}\n\nexport default Loader","// Scroller component facilitates the inifinite scroll of photos in home page and on search\n\n// importing context hooks\nimport React, { useContext } from 'react'\n\n// importing Container, Row and Col components from react-bootstrap\nimport { Container, Row, Col } from 'react-bootstrap';\n\n// importing custom made PhotoCard component for displaying photo in react-bootstrap card\nimport PhotoCard from './PhotoCard';\n\n// importing InfiniteScroll library from npm js for implimenting infinite scroll\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\n// custom css for loader\nimport { css } from \"@emotion/react\";\n\n// importing SyncLoader from npm js for showing a loader during api calls\nimport SyncLoader from \"react-spinners/SyncLoader\";\n\n// importing the context\nimport { RootContext } from '../context/RootContext';\n\n// importing styles\nimport '../App.css'\nimport Loader from './Loader';\n\n// custom style definition for loader\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nconst Scroller = (prop) => {\n\n    // Accessing the state values in context using useContext hooks\n    const {photos, hasMore, loading, remainingItems, searchValue} = useContext(RootContext)\n\n    return(\n\n        <Container>\n\n            {photos.length>0&&\n                <InfiniteScroll\n                    dataLength={remainingItems} //This is important field to render the next data\n                    next={()=>setTimeout(searchValue ? prop.onSearch : prop.getRecentImages, 2000)}\n                    hasMore={hasMore}\n                    endMessage={\n                        <>\n                            <p className=\"end-message\">\n                                <b>You have reached at the end</b>\n                            </p>\n                        </>\n                    }\n                >\n                    <Row>\n                        {photos.length>0&&photos.map((photo)=>{\n                            return(\n                                <Col xs={12} sm={6} md={4}>\n                                    <PhotoCard photo={photo}/>\n                                </Col>\n                            )\n                        })}\n                    </Row>\n                </InfiniteScroll>}\n            {loading && <Loader />}\n        </Container>\n    )\n}\n\nexport default Scroller","// Home is a container for showing recent photos\n\n// importing useEffect and useContext hooks\nimport React, { useEffect, useContext } from 'react'\n\n// importing the context\nimport { RootContext } from '../context/RootContext';\n\n// importing custom build scroller component\nimport Scroller from '../components/Scroller';\n\n// requiring axios for api calls\nconst axios = require('axios');\n\nconst Photos = () => {\n\n    // accessing global state values and callback functions\n    const { currentPage, getPhotos, getCurrentPage, checkHasMore, getLoadingStatus, searchValue} = useContext(RootContext)\n   \n    // triggering recent images api call inside useEffect\n    useEffect(()=>{\n        if(searchValue === '')\n            getRecentImages()\n    },[])\n\n\n\n    // function definition for recent images api call \n    const getRecentImages = async() => {\n        getLoadingStatus(true)\n        const apiUrl = `https://www.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key=4c6819cd6ef85784da413a2b4dbf484c&page=${currentPage}&format=json&nojsoncallback=1`\n        try {\n            const response = await axios.get(apiUrl);\n            response.data.photos.photo.map((photo) => {\n                getPhotos(photo)\n            })\n            getLoadingStatus(false)\n            checkHasMore(response.data.photos.page)\n            getCurrentPage(response.data.photos.page + 1)\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    return(\n\n        <Scroller \n            getRecentImages = {getRecentImages}\n        />\n        \n    )\n}\n\nexport default Photos","// Search is a container for showing search results\n\n// importing useEffect, useContext and useState hooks\nimport React,{ useEffect, useContext, useState } from 'react'\n\n// importing custom build scroller component\nimport Scroller from '../components/Scroller';\n\n// importing the context\nimport { RootContext } from '../context/RootContext';\n\n// requiring axios for api calls\nconst axios = require('axios');\n\nconst Search = () => {\n\n    // accessing global state values and callback functions\n    const { getLoadingStatus, getPhotos, getCurrentPage, currentPage, checkHasMore, searchValue, isEnterKeyPressed, photos, loading} = useContext(RootContext)\n    \n    // initializing a state for counting search results\n    const [totalSearchResult, setTotalSearchResult] = useState(0)\n\n    // triggering search api call inside useEffect\n    useEffect(()=>{\n        if(isEnterKeyPressed) {\n            onSearch()\n        }\n    },[isEnterKeyPressed])\n\n    // function definition for search api call \n    const onSearch = async() => {\n        getLoadingStatus(true)\n        const apiUrl = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=4c6819cd6ef85784da413a2b4dbf484c&text=${searchValue}&page=${currentPage}&format=json&nojsoncallback=1`\n        try {\n            const response = await axios.get(apiUrl);\n            setTotalSearchResult(response.data.photos.total)\n            response.data.photos.photo.map((photo) => {\n                getPhotos(photo)\n            })\n            getLoadingStatus(false)\n            checkHasMore(response.data.photos.page)\n            getCurrentPage(response.data.photos.page + 1)\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    return(\n        <>\n            {photos && photos.length>0 &&!loading&&<p style={{textAlign: 'right', margin: 10}}>Found {totalSearchResult} results</p>}\n            <Scroller \n                onSearch={onSearch}\n            />\n        </>\n\n        \n    )\n}\n\nexport default Search","//Parent Component App.js\n\n// importing useState hooks\nimport React,{useState} from 'react'\n\n// importing custom css\nimport './App.css';\n\n//importing custom build components\nimport Header from './components/Header';\nimport Home from './containers/Home';\nimport Search from './containers/Search';\n\n// importing the context\nimport {RootContext} from './context/RootContext'\n\nfunction App() {\n\n  // initializing the state values\n  const [photos, setPhotos] = useState([])\n  const [currentPage, setCurrentPage] = useState(1)\n  const [hasMore, setHasMore] = useState(false)\n  const [remainingItems, setRemainingItems] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [searchValue, setSearchValue] = useState('')\n  const [isEnterKeyPressed, setEnterKeyPressed] = useState(false)\n\n  // function definition to push api calls response photos in an state array\n  const getPhotos = (photo) => {\n    setPhotos(photos => [...photos, photo])\n  }\n\n  // function definition to update the page no\n  const getCurrentPage = (page) => {\n    setCurrentPage(page)\n  }\n\n  // function definition to check whether there is more items in the api response\n  const getHasMore = (items) => {\n    setHasMore(items)\n  }\n\n  // function definition to set the remaining no. of items in the response\n  const getRemainingItems = (items) => {\n    setRemainingItems(items)\n  }\n\n  // function definition to update the loading status\n  const getLoadingStatus = (status) => {\n    setLoading(status)\n  }\n\n  // function definition to set the search query to a state value\n  const getSearchValue = (search) => {\n    setSearchValue(search)\n  }\n\n  // function definition to reset the state values\n  const resetState = () => {\n    setHasMore(false)\n    setRemainingItems(null)\n    setLoading(false)\n    setPhotos([])\n    setCurrentPage(1)\n  }\n\n  // function definition for triggering the calling of function for search api\n  const onEnterKeyPressed = (value) => {\n    resetState()\n    setEnterKeyPressed(value)\n  }\n\n  // checking whether more items exist in response\n  const checkHasMore = (a) => {\n    let remaining = 1000 - a*100\n    if(remaining > 0){\n        getHasMore(true)\n    } \n    else {\n        getHasMore(false)\n    } \n    getRemainingItems(remaining)\n}\n\n  return (\n    \n    <RootContext.Provider \n\n      // Passing all state values and callback functions as props\n      value={{\n        photos: photos, \n        currentPage: currentPage, \n        hasMore: hasMore, \n        remainingItems: remainingItems,\n        loading: loading,\n        searchValue: searchValue,\n        isEnterKeyPressed: isEnterKeyPressed,\n        getPhotos: getPhotos,\n        getCurrentPage: getCurrentPage,\n        getHasMore: getHasMore,\n        getRemainingItems: getRemainingItems,\n        getLoadingStatus: getLoadingStatus,\n        getSearchValue: getSearchValue,\n        onEnterKeyPressed: onEnterKeyPressed,\n        checkHasMore: checkHasMore\n      }}>\n\n      <div className=\"App\">\n\n        <Header />\n\n\n        {/* if search api call is triggred and search field contains\n         search values then Search component is rendered otherwise \n         Home component is rendered */}\n\n        {(isEnterKeyPressed&&searchValue)?<Search /> : <Home />}\n      \n\n      </div>\n\n    </RootContext.Provider>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}